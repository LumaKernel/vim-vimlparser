# VimL Parsers

[![Build Status](https://travis-ci.org/vim-jp/vim-vimlparser.svg?branch=master)](https://travis-ci.org/vim-jp/vim-vimlparser) [![codecov](https://codecov.io/gh/vim-jp/vim-vimlparser/branch/master/graph/badge.svg)](https://codecov.io/gh/vim-jp/vim-vimlparser)

This is Vim script (a.k.a. VimL) parsers.

## Features

* The string tokenizer allows scripts to break a string into tokens.
* The parser to make AST (Abstract Syntax Tree)

## Supported languages

This parser provide same feature for following languages.

* Vim script
* Python
* Javascript 

## Example

### Parse VimL into AST, and print S-expression

All of interfaces are provided from vimlparser module. VimLParser parse into AST using StringReader, and Compiler to compile nodes.

```vim
let s:vimlparser = vimlparser#import()
let code = [
\ 'let s:message = printf("hello %d", 1+(2*3))'
\]
let r = s:StringReader.new(code)
let p = s:VimLParser.new()
let c = s:Compiler.new()
echo join(c.compile(p.parse(r)), "\n")
```

This above code output following.

```
(let = s:message (printf "hello %d" (+ 1 (* 2 3))))
```

### Parse VimL into AST, and print S-expression

ExprTokenizer break a string buffer into tokens for expression.

```vim
let code = [
\ 'echo 1+(2*3)'
\]
let s:vimlparser = vimlparser#import()
let r = s:vimlparser.StringReader.new(code)
let t = s:vimlparser.ExprTokenizer.new(r)
while !r.eof()
  let token = t.get()
  echo token.value
endwhile
```

This above code output following.

```
echo
1
+
(
2
*
3
)
<EOL>
```
