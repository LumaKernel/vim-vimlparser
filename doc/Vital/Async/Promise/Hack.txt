*Vital.Async.Promise.Hack.txt*	Default error handling to ease debugging.

Author : Luma <tomorinao.info@gmail.com>
License: The Unlicense
Support: Vim 8.1 and Above
Support: neovim 0.4.3 and Above


==============================================================================
CONTENTS				*Vital.Async.Promise.Hack-contents*

INTRODUCTION			|Vital.Async.Promise.Hack-introduction|
FUNCTION			|Vital.Async.Promise.Hack-function|


==============================================================================
INTRODUCTION				*Vital.Async.Promise.Hack-introduction*

*Vital.Async.Promise.Hack* is the lazy hack to ease debugging
|Vital.Async.Promise|. Sometimes we forgot to register the catch.

This is the one-liner Ex command to replace your imports.
>
  :vim /#import('Async.Promise')/ `find . -name "*.vim" -a -not -path "*autoload/vital*"` | cdo s/#import('Async.Promise')/#import('Async.Promise.Hack')/g | up
<

==============================================================================
FUNCTION 				*Vital.Async.Promise.Hack-function*

			*Vital.Async.Promise.Hack.new()*
new({executor} [, {timeout} = 5000] )
	Alternative for |Vital.Async.Promise.new()|.
	After {timeout} ms, this register
	|Vital.Async.Promise-Promise.catch()| of the instance returned.

			*Vital.Async.Promise.Hack.set_debug()*
set_debug({debug})
	Set truthy value to enable features of this plugin.

			*Vital.Async.Promise.Hack.set_err_handler()*
set_err_handler({handler})
	Set the handler for error handling. Set |v:null| to use the default
	error handler. The default handler is showing the exception in
	|:echomsg|.

==============================================================================
vim:tw=78:ts=8:noet:ft=help:norl
