*Vital/Options.txt*		Define options and provide user friendly utils

Author : Luma <tomorinao.info@gmail.com>
License: The Unlicense
Support: Vim 8.0.0003 and Above
Support: Neovim 0.2.0 and Above


==============================================================================
CONTENTS				*Vital.Options-contents*

INTRODUCTION			|Vital.Options-introduction|
FUNCTION			|Vital.Options-function|
PROVIDER			|Vital.Options-Provider|


==============================================================================
INTRODUCTION				*Vital.Options-introduction*

*Vital.Options* is a tool to define the vim plugin options and provide a user
friendly setter/getter function that validates the variables by types and
validator given in advance.
It can also generate the formatted document about your plugin's options.
>
	let s:Options = vital#{your plugin name}#import('Options')
			\.new('my_awesome_plugin')
	
	call s:Options.define('git_executable', {
	    \  'default': 'git',
	    \  'type': 'string',
	    \  'validator': {
	    \     value -> executable(value) ? 0
	    \     : 'Specify executable path.'},
	    \ })
	
	call s:Options.define('mode', {
	    \  'default': 'edit',
	    \  'scopes': 'gb',
	    \  'select': ['edit', 'split', 'vsplit'],
	    \ })
	
	call s:Options.define('enable_at_startup', {
	    \  'default': 0,
	    \  'deprecated': 1,
	    \  'formatted_type': 'bool',
	    \ })
	
	
	" You should export functions for your plugin users
	
	func! my#awesome#options#set(...)
	    call call(s:Options.user_set, a:000)
	endfunc
	
	func! my#awesome#options#get(...)
	    return call(s:Options.user_get, a:000)
	endfunc
	
	" You should provide the port function for your plugin to get option
	" value and ensure the options are defined.
	function! my#awesome#options#instance()
	    return s:Options
	endfunction
	
	" -----
	
	" Your plugin users can ...
	call my#awesome#options#set('enable_at_startup', '1')
	
	call my#awesome#options#set('mode', 'new')
	" -> got error like "[my_awesome_plugin/mode] Invalid value
	"   'new'. Selections are ['edit', 'split', 'vsplit']."
	
	" -----
	
	" You can make documents about options like this
	" let doc = join(s:Options.generate_document(), "\n")
<


=============================================================================
FUNCTION 				*Vital.Options-function*

					*Vital.Options.new()*
new({namespace}, {dict})
	Make instance of *Vital.Options-Namespace* . {namespace} is used to
	determine the option variable prefix.
	Below options can be set by dictionary {dict}.
	  - {dict.plugin_name}
	    	Default : {namespace}
	    	Type : string

		Used as the prefix of error report for users of your plugin.
	  - {dict.provider}
	    	Default : `'_'`
	    	Type : string | |Vital.Options-Provider|

		Defines the provider that determines how variables are set
		and how variables are shown in documents.
		See |Vital.Options-Provider|.

					*Vital.Options-Namespace.define()*
|Vital.Options-Namespace|.define({name}, {dict})
	Defines a option {name}.
	If {dict.default} are given, it sets the value in global.
	Below options can be set by dictionary {dict}.
	  - {dict.default}
	    	Type : any

		Default value for option. Recommended to set.
		If not set, you should check the existence by
		|Vital.Options-Namespace.is_set()|.
	  - {dict.deprecated}
	    	Default : 0
	    	Type : bool

		If set, when the user set the value, this plugin tells
		that the options is deprecated by |:echohl| and |:echomsg|.
	  - {dict.validator}
	    	Type : func

		If set, the value is checked by this function.
		The function should get just one argument that the user want
		to set.
		The function should return the error message as string if
		failed, or return 0 if there's no error. Error message will
		shown with plugin name.
		This can be used with {dict.type} and {dict.select}
	  - {dict.select}
	    	Type : list

		If set, the value is be checked whether it is one of this list
		or not. Checking is |type()| checking followed by |expr-==#|
		checking.
	  - {dict.no_declare_default}
	    	Type : bool

		If set, the default value is not defined in global even if
		{dict.default} is given.
	  - {dict.scopes}
	    	Default : `'g'`
	    	Type : string

		The scopes that the user can specify. Ones of `gtwb` are
		available. This is corresponding to `g:`, `t:`, `w:`, `b:`, resp.
		Scope checking for determing the value is searched from index 0
		toward the last.
	  - {dict.type}
		The types. You can specify the type string that appeared in
		`v:t_*` variables ( |v:t_TYPE| ) like `string` or type number
		like `v:t_string`.
		You can specify OR types with separating with `|` or use list.
		Spaces are trimmed.
	  - {dict.formatted_type}
	    	Default : generated by {dict.type}
	    	Type : string

		The types used in the document generator. This is generated by
		{dict.type} like `number | float`. This is useful when setting
		`bool` though you want to accept any value.
	  - {dict.doc}
	    	Type : list

		The documents for this options. Each elements is corresponding
		to one line, but this inserts new line when the line exceeds
		80 column.

					*Vital.Options-Namespace.is_set()*
|Vital.Options-Namespace|.is_set({name})
	The value of option {name} is available to be got or not.
	Note that it always returns false when the default value is given.

					*Vital.Options-Namespace.get()*
|Vital.Options-Namespace|.get({name}, {dict})
	Defines a option {name}.
	Below options can be set by dictionary {dict}.
	 - {dict.default_overwrite}
	   	Type: any

		If set, it returns the value like as the default value is this.

					*Vital.Options-Namespace.set()*
|Vital.Options-Namespace|.set({name}, {dict})
	Set the option {name}.
	Below options can be set by dictionary {dict}.
	 - {dict.value}
	   	Type: specified by |Vital.Options-Namespace.define()|

	 	If omitted, the the value will be unset.
	 - {dict.scope}
	   	Default: {scopes}[0] defined by |Vital.Options-Namespace.define()|
	   	Type: string

		Scopes to set. Multiple scopes are accepted like `'gw'`.
		`ALL` can be used to specify all available scopes.

					*Vital.Options-Namespace.unset()*
|Vital.Options-Namespace|.unset({name}, {dict})
	Unset the option {name}.
	Below options can be set by dictionary {dict}.
	 - {dict.scope}
	   	Default: {scopes}[0] defined by |Vital.Options-Namespace.define()|
	   	Type: string

		Scopes to unset. Multiple scopes are accepted like `'gw'`.
		`ALL` can be used to specify all available scopes.

					*Vital.Options-Namespace.set_default()*
|Vital.Options-Namespace|.set_default({name}, {dict})
	Set the option {name} default.
	Below options can be set by dictionary {dict}.
	 - {dict.scope}
	   	Default: {scopes}[0] defined by |Vital.Options-Namespace.define()|
	   	Type: string

		Scopes to set. Multiple scopes are accepted like `'gw'`.
		`ALL` can be used to specify all available scopes.

					*Vital.Options-Namespace.user_set()*
|Vital.Options-Namespace|.user_set({name}, {value} [, {scope}])
	Set the option {name} to {value}.
	You can define this in global by
	|Vital.Options-Namespace.define_user_setter()|.
	The default {scope} is {scopes}[0] that is defined by
	|Vital.Options-Namespace.define()|.
>
	func! my#awesome#options#set(...)
	    call call(s:Options.user_set, a:000)
	endfunc
<

					*Vital.Options-Namespace.user_get()*
|Vital.Options-Namespace|.user_get({name})
	Get the option {name}.
	You can define this in global by
	|Vital.Options-Namespace.define_user_getter()|.
>
	func! my#awesome#options#set(...)
	    return call(s:Options.user_get, a:000)
	endfunc
<

					*Vital.Options-Namespace.user_unset()*
|Vital.Options-Namespace|.user_unset({name})
	Unset the option {name}.
	You can define this in global by yourself.

					*Vital.Options-Namespace.define_user_setter()*
|Vital.Options-Namespace|.define_user_setter({funcname})
	Defines *Vital.Options-Namespace.user_set()* in global.
	You can prefix `'g:'` to {funcname}. You can't use this with
	|autoload-functions|.
	Note that the first character of global function must be capital.
	Note that you should call autoload plugin from vim script in plugins
	folder to ensure the existence.

					*Vital.Options-Namespace.define_user_getter()*
|Vital.Options-Namespace|.define_user_getter({funcname})
	Defines *Vital.Options-Namespace.user_get()* in global.
	You can prefix `'g:'` to {funcname}. You can't use this with
	|autoload-functions|.
	Note that the first character of global function must be capital.
	Note that you should call autoload plugin from vim script in plugins
	folder to ensure the existence.

					*Vital.Options-Namespace.generate_document()*
|Vital.Options-Namespace|.generate_document()
	It returns the list of generated documents. Each element is assumed to
	be corresponding to one line.

=============================================================================
PROVIDER 				*Vital.Options-Provider*


You can make a provider. |Vital.Options-Provider| must have below functions.
You can assume that the {name} exists in {Namespace} and {value} is valid.
- unset({Namespace}, {scope}, {name})
- set({Namespace}, {scope}, {name}, {value})
- get({Namespace}, {scope}, {name})
- is_available({Namespace}, {scope}, {name}) : Checks for determining whether
  to skip.
- name({Namespace}, {name}) : Used for tag in the document.
- format({Namespace}, {scopes}, {name}) : Used for first line in the document.

For more information, check the implementation of the default providers.


Below are the default providers.

					*Vital.Options-Provider-*
`'-'` : It provides options via variable like {scope}:{namespace}_{name}

					*Vital.Options-Provider#*
`'#'` : It provides options via variable like {scope}:{namespace}#{name}

					*Vital.Options-Provider-Object*
`'object'` : It provides options via variable like {scope}:{namespace}.{name}


==============================================================================
vim:tw=78:ts=8:noet:ft=help:norl
