
Describe Async.Promise.Hack
  Before all
    let Promise0 = vital#vital#import('Async.Promise')
    let Promise = vital#vital#import('Async.Promise.Hack')
    let E = Promise.get_default_error_handler()
    call Promise.set_debug(1)
    call Promise.set_timeout(1)
  End

  Describe .new()
    It echos throwed error
      redir => mes
        call Promise.new({resolve, reject -> [execute("throw 'error from throw'"), 0][-1]})
        sleep 200m
      redir END
      Assert Match(mes, '\CError detected while processing')
      Assert Match(mes, '\cerror from throw')
      " Check called just once
      Assert NotMatch(mes, repeat('\CError detected while processing.*', 2))
    End
    It echos rejected error
      redir => mes
        call Promise.new({resolve, reject -> [reject('reject from new'), 0][-1]})
        sleep 200m
      redir END
      Assert Match(mes, '\creject from new')
      " Check called just once
      Assert NotMatch(mes, repeat('\creject from new.*', 2))
    End
    It not block .catch by user
      let handled_myself = 0
      redir => mes
        call Promise.new({resolve, reject -> [execute("throw 'error from throw'"), 0][-1]})
              \.catch({-> [handled_myself, execute('let handled_myself = 1')]})
        sleep 200m
      redir END
      Assert NotMatch(mes, '\CError detected while processing')
      Assert NotMatch(mes, '\cerror from throw')
      Assert Equals(handled_myself, 1)
    End
  End

  Describe .resolve()
    It hacks .then()
      function! s:_test() abort
        _bar
      endfunction
      redir => mes
        call Promise.resolve('foo')
              \.then({val -> s:_test()})
        sleep 200m
      redir END
      Assert Match(mes, '\CError detected while processing')
      Assert Match(mes, '\C_bar')
      " Check called just once
      Assert NotMatch(mes, repeat('\CError detected while processing.*', 2))
    End
  End

  Describe .reject()
    It echos rejected error
      redir => mes
        call Promise.reject('reject from Promise.reject()')
        sleep 200m
      redir END
      Assert Match(mes, '\Creject from Promise.reject()')
      " Check called just once
      Assert NotMatch(mes, repeat('\Creject from Promise.reject().*', 2))
    End
  End

  Describe .get_default_error_handler()
    It provides useful error handler
      redir => mes
        call Promise0.resolve('foo')
              \.then({val -> execute('_bar')})
              \.catch(E)
        sleep 200m
      redir END
      Assert Match(mes, '\CError detected while processing')
      Assert Match(mes, '\C_bar')
      " Check called once
      Assert NotMatch(mes, repeat('\C_bar.*', 2))
    End
  End


  It extends promise features
    for key in keys(Promise0)
      if type(Promise0[key]) == v:t_func
        call themis#log(key)
        Assert True(has_key(Promise, key))
      endif
    endfor
  End
End

